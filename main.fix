// Provides a simple interface for running commands.
//
// Example usage: TBA but see [fixlang-docpage-generator](https://github.com/tttmmmyyyy/fixlang-docpage-generator/blob/main/main.fix).
module EZS;

import Subprocess;

// Configuration for EZS.
type EZSConfig = struct {
    // Print (to stderr) the command to be executed.
    // 
    // Similar to `set -x` in bash.
    execution_trace : Bool,
    // Print (to stderr) the stderr output of the command.
    // 
    // If this is not set, the stderr output will be discarded.
    eprint_stderr : Bool,
};

namespace EZSConfig {
    // Default configuration for EZS.
    // 
    // `execution_trace` is false, `eprint_stderr` is true.
    default : EZSConfig;
    default = EZSConfig {
        execution_trace : false,
        eprint_stderr : true
    };
}

// Run a command and return its stdout ("o"), stderr ("e") and exit code ("c").
//
// # Parameters
// - `config`: The configuration for EZS.
// - `commands`: The command to run, as an array of strings, e.g., `["ls", "-l"]`.
ez_run_oec : EZSConfig -> Array String -> IO (String, String, U8);
ez_run_oec = |config, commands| ez_run_wi_oec(config, commands, "");

// Run a command and return its stdout ("o") and stderr ("e").
// If the command fails, the program will exit with code 1.
//
// # Parameters
// - `config`: The configuration for EZS.
// - `commands`: The command to run, as an array of strings, e.g., `["ls", "-l"]`.
ez_run_oe : EZSConfig -> Array String -> IO (String, String);
ez_run_oe = |config, commands| ez_run_wi_oe(config, commands, "");

// Run a command and return its stdout ("o").
// 
// If the command fails, the program will exit with code 1.
//
// # Parameters
// - `config`: The configuration for EZS.
// - `commands`: The command to run, as an array of strings, e.g., `["ls", "-l"]`.
ez_run_o : EZSConfig -> Array String -> IO String;
ez_run_o = |config, commands| ez_run_wi_o(config, commands, "");

// Run a command with input ("wi") and return its stdout ("o"), stderr ("e") and exit code ("c").
//
// # Parameters
// - `config`: The configuration for EZS.
// - `commands`: The command to run, as an array of strings, e.g., `["grep", "ERROR"]`.
// - `input`: The input to provide to stdin of the command.
ez_run_wi_oec : EZSConfig -> Array String -> String -> IO (String, String, U8);
ez_run_wi_oec = |config, commands, input| (
    let commands_str = commands.to_iter.join(" ");
    when(config.@execution_trace, 
        eprintln(commands_str)
    );;
    let ((out, err), status) = *Subprocess::run_string(commands.@(0), commands, input).try(exit_with_msg(1));
    when(config.@eprint_stderr && err.get_size > 0, eprintln(err));;
    let code = *_check_exit_status(status, commands_str);
    pure $ (out, err, code)
);

// Run a command with input ("wi") and return its stdout ("o") and stderr ("e").
//
// # Parameters
// - `config`: The configuration for EZS.
// - `commands`: The command to run, as an array of strings, e.g., `["grep", "ERROR"]`.
// - `input`: The input to provide to stdin of the command.
ez_run_wi_oe : EZSConfig -> Array String -> String -> IO (String, String);
ez_run_wi_oe = |config, commands, input| (
    let (out, err, code) = *ez_run_wi_oec(config, commands, input);
    _check_exit_code(code, commands.to_iter.join(" "));;
    pure $ (out, err)
);

// Run a command with input ("wi") and return its stdout ("o").
//
// If the command fails, the program will exit with code 1.
//
// # Parameters
// - `config`: The configuration for EZS.
// - `commands`: The command to run, as an array of strings, e.g., `["grep", "ERROR"]`.
// - `input`: The input to provide to stdin of the command.
ez_run_wi_o : EZSConfig -> Array String -> String -> IO String;
ez_run_wi_o = |config, commands, input| (
    let (out, _, code) = *ez_run_wi_oec(config, commands, input);
    _check_exit_code(code, commands.to_iter.join(" "));;
    pure $ out
);

// Check the exit status and exit the program if it is `signaled` or `wait_failed`.
//
// Returns the exit code if the status is `exit`.
_check_exit_status : ExitStatus -> String -> IO U8;
_check_exit_status = |status, command| (
    let command = "`" + command + "`";
    match status {
        exit(code) => (
            pure $ code
            // let msg = "error: " + command + " exited with code " + code.to_string;
        ),
        signaled(signal) => (
            let msg = "error: " + command + " terminated by signal " + signal.to_string;
            eprintln(msg);;
            exit(1)
        ),
        wait_failed() => (
            let msg = "error: " + "Failed to waiting termination of " + command;
            eprintln(msg);;
            exit(1)
        )
    }
);

// Check the exit code of a command and exit the program if it is not 0.
_check_exit_code : U8 -> String -> IO ();
_check_exit_code = |code, command| (
    when(code != 0_U8, 
        let msg = "error: " + command + " exited with code " + code.to_string;
        eprintln(msg);;
        exit(1)
    );;
    pure()
);

// Changes the current working directory to the specified path.
//
// # Parameters
// - `dir`: The directory to change to, as a string.
ez_cd : String -> IO ();
ez_cd = |dir| (
    let code = *dir.borrow_c_str_io(|c_str| FFI_CALL_IO[CInt chdir(Ptr), c_str]);
    when(code != 0.to_CInt, 
        let msg = "error: Failed to change directory to " + dir;
        eprintln(msg);;
        exit(1)
    );;
    pure()
);

// TODO: Add `ez_cwd : IO String`;
